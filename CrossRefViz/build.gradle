/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}
else {
	ghidraInstallDir = "<REPLACE>"
}

task distributeExtension {
	group "Ghidra"

	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
	dependsOn ':buildExtension'
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

// root build.gradle
plugins {
    id 'java'
    id 'eclipse'
    id 'ghidra'
}

def GHIDRA_VERSION = "11.0.1"
def GHIDRA_INSTALL_DIR = project.findProperty("GHIDRA_INSTALL_DIR") ?: System.getenv("GHIDRA_INSTALL_DIR")

allprojects {
    apply plugin: 'java'
    apply plugin: 'ghidra'

    repositories {
        mavenCentral()
        flatDir {
            dirs "${GHIDRA_INSTALL_DIR}/Ghidra/Features/Base/lib"
        }
    }

    configurations {
        ghidra
    }

    dependencies {
        compileOnly "generic:ghidra_${GHIDRA_VERSION}_PUBLIC"
        implementation 'com.google.code.gson:gson:2.8.9'
        implementation 'org.jgrapht:jgrapht-core:1.5.1'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        
        // Cross-module dependencies
        implementation project(':MalwareConfigExtractor')
        implementation project(':APIMapping')
    }

    ghidraExtension {
        displayName = "Advanced Analysis Suite"
        category = "Reverse Engineering"
        description = "Comprehensive malware analysis toolkit"
        author = "Your Name"
        version = "1.0"
    }
}

subprojects {
    // Plugin-specific configurations
    switch(project.name) {
        case 'EnhancedDebugger':
            dependencies {
                implementation 'org.java-websocket:Java-WebSocket:1.5.3'
            }
            break
            
        case 'XrefVisualizer':
            dependencies {
                implementation 'org.jfree:jfreechart:1.5.3'
            }
            break
            
        case 'TaintAnalysis':
            dependencies {
                implementation 'org.apache.commons:commons-math3:3.6.1'
            }
            break
    }
}

task buildAllExtensions(type: GradleBuild) {
    tasks = ['EnhancedDebugger:buildExtension', 
             'MalwareConfigExtractor:buildExtension',
             'APIMapping:buildExtension',
             'XrefVisualizer:buildExtension',
             'TaintAnalysis:buildExtension']
}

task installAllExtensions(type: Copy) {
    from subprojects.buildExtension.outputs
    into "${GHIDRA_INSTALL_DIR}/Extensions"
    dependsOn buildAllExtensions
}

// Eclipse configuration for multi-module setup
eclipse {
    classpath {
        file {
            whenMerged { cp ->
                cp.entries.removeAll { entry ->
                    entry.kind == 'src' && entry.path.startsWith('src/test')
                }
                subprojects.each { sub ->
                    cp.entries.add(new org.gradle.plugins.ide.eclipse.model.ProjectDependency("/${sub.name}"))
                }
            }
        }
    }
}
