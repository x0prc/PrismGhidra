import com.google.gson.Gson;
import ghidra.util.Msg;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class PatternDatabase {
    private static PatternDatabase instance;
    private List<MalwareSignature> signatures = new ArrayList<>();

    // Default embedded patterns
    static {
        instance = new PatternDatabase();
        instance.addDefaultPatterns();
    }

    public static PatternDatabase getInstance() {
        return instance;
    }

    public void loadFromJson(String jsonPath) {
        try (FileReader reader = new FileReader(jsonPath)) {
            MalwareSignature[] loaded = new Gson().fromJson(reader, MalwareSignature[].class);
            signatures.clear();
            for (MalwareSignature sig : loaded) {
                sig.compilePattern();
                signatures.add(sig);
            }
        } catch (Exception e) {
            Msg.showError(this, null, "Pattern Load Error", 
                "Failed to load patterns from: " + jsonPath, e);
        }
    }

    private void addDefaultPatterns() {
        signatures.addAll(List.of(
            new MalwareSignature("C2_Server", "C2_[a-zA-Z0-9]+:[0-9]{2,5}", "Potential C2 server"),
            new MalwareSignature("Base64_Blob", "[A-Za-z0-9+/]{32,}={0,2}", "Base64 encoded data"),
            new MalwareSignature("PE_Header", "MZ.{32}PE", "PE header signature")
        ));
    }

    public List<MalwareSignature> getSignatures() {
        return new ArrayList<>(signatures);
    }

    public static class MalwareSignature {
        public String name;
        public String pattern;
        public String description;
        private Pattern compiled;

        public MalwareSignature() {} // For JSON deserialization

        public MalwareSignature(String name, String pattern, String description) {
            this.name = name;
            this.pattern = pattern;
            this.description = description;
            compilePattern();
        }

        void compilePattern() {
            try {
                compiled = Pattern.compile(pattern);
            } catch (Exception e) {
                Msg.error(this, "Invalid regex pattern: " + pattern);
            }
        }

        public Pattern getCompiled() {
            return compiled;
        }
    }
}
