import ghidra.app.services.AbstractAnalyzer;
import ghidra.app.services.AnalyzerType;
import ghidra.app.util.importer.MessageLog;
import ghidra.program.model.address.AddressSetView;
import ghidra.program.model.data.StringDataType;
import ghidra.program.model.listing.*;
import ghidra.program.model.mem.Memory;
import ghidra.program.model.util.*;
import ghidra.util.task.TaskMonitor;

public class MalwareConfigExtractorAnalyzer extends AbstractAnalyzer {
    private static final String BOOKMARK_CATEGORY = "MalwareConfig";
    
    public ConfigAnalyzer() {
        super("Malware Config Extractor", 
            "Identifies malware configuration patterns", 
            AnalyzerType.BYTE_ANALYZER);
        setDefaultEnablement(true);
    }

    @Override
    public boolean canAnalyze(Program program) {
        return true; // Works with any program
    }

    @Override
    public boolean analyze(Program program, AddressSetView set, 
            TaskMonitor monitor, MessageLog log) {
            
        PatternDatabase patternDB = PatternDatabase.getInstance();
        Memory memory = program.getMemory();
        Listing listing = program.getListing();
        
        memory.getStrings(TaskMonitor.DUMMY).forEachRemaining(stringData -> {
            if (monitor.isCancelled()) return;
            
            String value = stringData.getValue();
            Address address = stringData.getAddress();
            
            patternDB.getSignatures().forEach(sig -> {
                if (sig.getCompiled() != null && 
                    sig.getCompiled().matcher(value).find()) {
                    
                    createBookmark(program, address, sig);
                    annotateString(program, listing, address, value);
                }
            });
        });
        return true;
    }

    private void createBookmark(Program program, Address address, 
            PatternDatabase.MalwareSignature sig) {
        String comment = String.format("[%s] %s: %s", 
            sig.name, sig.description, sig.pattern);
            
        program.getBookmarkManager().setBookmark(
            address, BOOKMARK_CATEGORY, sig.name, comment);
    }

    private void annotateString(Program program, Listing listing, 
            Address address, String value) {
        Data data = listing.getDataAt(address);
        if (data == null) {
            listing.createData(address, StringDataType.dataType, value.length());
        }
        program.getListing().setComment(address, 
            CodeUnit.EOL_COMMENT, "Malware Config: " + value);
    }
}
